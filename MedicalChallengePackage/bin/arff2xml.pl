#!/usr/local/bin/perl

use Getopt::Long;

=head1 NAME

arff2xml.pl

=head1 SYNOPSIS

This program takes as input answerFile generated by the WEKA 
data mining package, the order file generated by the xml2arff.pl 
program and the test file (possibly generated by the xml2arff.pl 
program) and produces the a test file in the 2007 Medical Challenge 
xml format with each instance assigned an ICD9CM code by the 
learning algorithm
=head1 USAGE

xml2arff.pl [OPTIONS] DESTINATION

=head2 Required Arguments:

=head3 DESTINATION

The destination file which will contain the test file in 
the 2007 Medical Challenge xml format with the ICD9CM 
codes assigned by the classifier.

=head3 --answerFile

The answer file produced by the WEKA data mining package when 
running the classify.pl program. 

=head3 --orderFile

The order file produced by the xml2arff.pl program when running 
the classify.pl program.

=head3 --testFile

The test file that was used by the xml2arff.pl program. It was 
either given as an option to the xml2arff.pl program or generated 
by it.

=head2 Optional Arguments:

=head3 --help

Displays the summary of command line options.

=head3 --version

Displays the version information.

=head1 AUTHOR

Bridget McInnes, University of Minnesota

=head1 COPYRIGHT

Copyright (c) 2007,

 Ted Pedersen, University of Minnesota, Duluth.
 tpederse at umn.edu

 Bridget McInnes, University of Minnesota
 bthomson at cs.umn.edu

 John Carlis, University of Minnesota
 carlis at cs.umn.edu

 Serguei Pakhomov, University of Minnesota
 pakh0002 at umn.edu

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to

 The Free Software Foundation, Inc.,
 59 Temple Place - Suite 330,
 Boston, MA  02111-1307, USA.

=cut

GetOptions( "version", "help", "answerFile=s", "orderFile=s", "testFile=s");

#  if help is defined, print out help
if( defined $opt_help ) {
    $opt_help = 1;
    &showHelp();
    exit;
}

#  if version is requested, show version
if( defined $opt_version ) {
    $opt_version = 1;
    &showVersion();
    exit;
}

if(!(defined $opt_answerFile)) { 
    print "answerFile must be defined.\n";
    exit;
}
if(!(defined $opt_orderFile)) { 
    print "orderFile must be defined.\n";
    exit;
}
if(!(defined $opt_testFile)) { 
    print "testFile must be defined.\n";
    exit;
}

#  retrieve the destination file
my $destination = shift;

#  check that destination has been supplied
if( !($destination) ) {
    print STDERR "No output file (DESTINATION) supplied.\n";
    askHelp();
    exit;
}

open(DST, ">$destination") || die "Could not open destination file: $destination\n";

my $answerFile = $opt_answerFile;
my $orderFile  = $opt_orderFile;
my $testFile   = $opt_testFile;

open(ANSWER, $answerFile) || die "Could not open answerFile : $answerFile\n";
open(ORDER, $orderFile)   || die "Could not open orderFile : $orderFile\n";
open(TEST, $testFile)     || die "Could not open testFile : $testFile\n";

my @orderArray = ();
while(<ORDER>) {
    chomp;
    push @orderArray, $_;
}

my %answerHash = ();
my $orderCounter = 0;
while(<ANSWER>) {
    chomp;
    my($num, $category, $confidence, $answer) = split/\s+/;
    #print "$orderArray[$orderCounter] $category\n";
    $answerHash{$orderArray[$orderCounter++]} = $category;
}
 
my $id = "";   
while(<TEST>) {
    chomp;
    
    #  get the id of the document
    if($_=~/\<doc id=\"(.*)\" type/) {
	$id = $1; 
    }
    
    #  print every  line as is except the "<code orgin=" lines
    if($_=~/<code origin=/) { ; }
    elsif($_=~/<codes>/)    { ; }
    elsif($_=~/<\/codes>/)  { ; }
    else { print DST "$_\n"; }
    
    
    # if the line is "<codes>", we just printed it so print ours 
    if($_=~/<codes>/) { 
	my $id_codes = $answerHash{$id};
	my @codes = split/_/, $id_codes;
	print DST "    <codes>\n";
	foreach (@codes) {
	    print DST "     <code origin=\"bthomson\@cs.umn.edu\" type=\"ICD-9-CM\">$_</code>\n";
	}
	print DST "    <\/codes>\n";
    }
}   

##############################################################################
#  SUB FUNCTIONS
##############################################################################

#  function to output minimal usage notes
sub minimalUsageNotes {
    
    print STDERR "Usage: arff2xml.pl [OPTIONS] DESTINATION\n";
    askHelp();
}

#  function to output help messages for this program
sub showHelp() {

    print "Usage: arff2xml.pl [OPTIONS] DESTINATION\n\n";
    
    print "The program creates the test file in the 2007 Medical Challenge \n";
    print "format data with the ICD9CM codes identified by the classifier.\n\n";

    print "REQUIREMENTS: \n\n";
    
    print "--answerFile FILE       The answer file produced by the WEKA\n";
    print "                        data mining package when running classify.pl\n\n";

    print "--orderFile FILE        The order file produced by xml2arff.pl\n\n";
    
    print "--testFile FILE         The test file.\n\n";

    print "OPTIONS:\n\n";
    
    print "--version                Prints the version number.\n\n";
 
    print "--help                   Prints this help message.\n\n";
}

#  function to output the version number
sub showVersion {
    print '$Id: arff2xml.pl,v 1.5 2007/05/16 16:31:09 btmcinnes Exp $';
    print "\nCopyright (c) 2007, Ted Pedersen, Bridget McInnes, \n";
    print "John Carlis, and Serguei Pakhomov\n";
}

#  function to output "ask for help" message when user's goofed
sub askHelp {
    print STDERR "Type arff2xml.pl --help for help.\n";
}
    
 

