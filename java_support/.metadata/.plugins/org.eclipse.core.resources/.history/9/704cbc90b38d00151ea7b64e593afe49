package edu.pitt.medical_nlp.utility;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import edu.pitt.medical_nlp.Config;
import sun.reflect.generics.reflectiveObjects.NotImplementedException;

public class MetaType {
	public MetaType() {

	}
	
	public void requestWeb(String term){
		try {
			URL url = new URL(Config.URL_MESH);
			HttpsURLConnection con = (HttpsURLConnection) obj.openConnection();
			
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void initLocal() {

		try {
			File fXmlFile = new File(Config.PATH_MESH);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder;
			dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(fXmlFile);
			
			//optional, but recommended
			//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
			doc.getDocumentElement().normalize();

			NodeList desc_list = doc.getElementsByTagName("DescriptorRecord");
			
			for (int i = 0; i < desc_list.getLength(); i++) {
				Node desc = desc_list.item(i);
				@SuppressWarnings("unused")
				NodeList concept_list = ((Element)desc).getElementsByTagName("Concept");
				throw new NotImplementedException();
				
			}
			
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
