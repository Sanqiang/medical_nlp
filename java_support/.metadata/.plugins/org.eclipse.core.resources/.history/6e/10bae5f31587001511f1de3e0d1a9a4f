package edu.pitt.medical_nlp;

public class Helper {
	public static PartOfSpeech mapPartOfSpeech(String postag) {
		PartOfSpeech partOfSpeech = PartOfSpeech.OTHER;
		switch (postag) {
		case "NN":
		case "NNS":
		case "NNP":
		case "NNPS":
			partOfSpeech = PartOfSpeech.NOUN;
			break;
		case "VB":
		case "VBD":
		case "VBG":
		case "VBN":
		case "VBP":
		case "VBZ":
			partOfSpeech = PartOfSpeech.VERB;
			break;
		case "JJ":
		case "JJR":
		case "JJS":
			partOfSpeech = PartOfSpeech.ADJECTIVE;
			break;
		case "RB":
		case "RBR":
		case "RBS":
			partOfSpeech = PartOfSpeech.ADVERB;
			break;
		default:
			partOfSpeech = PartOfSpeech.OTHER;
			break;
		}
		return partOfSpeech;
	}
	
	public static DependencyType mapRelationTypes(String dependencyShortName) {
		DependencyType mappedRelType = DependencyType.OtherLocalType;
		switch (dependencyShortName) {
		case "neg":
			mappedRelType = DependencyType.Negative;
			break;
		case "nmod":
			mappedRelType = DependencyType.NounModifier;
			break;
		case "amod":
			mappedRelType = DependencyType.AdjectivalModifier;
			break;
		case "dep":
			mappedRelType = DependencyType.Dependent;
			break;
		case "nn":
			mappedRelType = DependencyType.NounCompoundModifier;
			break;
		case "nsubj":
			mappedRelType = DependencyType.NominalSubject;
			break;
		// case "dobj":
		// mappedRelType = DependencyType.DirectObject;
		// break;
		case "conj:and":
		case "compound":
		case "conj":
			mappedRelType = DependencyType.Conjunction;
			break;
		case "acomp":
		case "ccomp":
		case "xcomp":
		case "dobj":
		case "iobj":
		case "pobj":
			mappedRelType = DependencyType.Complement;
			break;
		default:
			mappedRelType = DependencyType.OtherLocalType;
			break;
		}
		return mappedRelType;
	}
}
