package edu.pitt.medical_nlp;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

import edu.stanford.nlp.ling.HasWord;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.parser.nndep.DependencyParser;
import edu.stanford.nlp.process.DocumentPreprocessor;
import edu.stanford.nlp.tagger.maxent.MaxentTagger;
import edu.stanford.nlp.trees.GrammaticalStructure;
import edu.stanford.nlp.trees.TypedDependency;

public class Process {
	private ArrayList<String> _docs = null;
	private HashMap<String, Integer> _aspects = null;
	private HashMap<String, String> _mrconso, _mrsty = null;
	private String[] _rule_out_type = { "Idea or Concept", "Temporal Concept", "Quantitative Concept","Physiologic Function","Intellectual Product" };

	public Process() {
		this._docs = new ArrayList<String>();
		try {
			BufferedReader reader = new BufferedReader(new FileReader(new File(Config.PATH_DATA)));
			String line = null;
			while (null != (line = reader.readLine())) {
				String[] items = line.split("\t");
				this._docs.add(items[2]);
			}
			reader.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		this.processMrconso();
		this.processMrsty();
	}

	void processMrsty() {
		try {
			this._mrsty = new HashMap<>();
			BufferedReader reader = new BufferedReader(new FileReader(new File(Config.MRSTY)));
			String line = null;
			while (null != (line = reader.readLine())) {
				String[] items = line.split("\\|");
				String type = items[3];
				String id = items[0];
				_mrsty.put(id, type);
			}
			reader.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	void processMrconso() {
		try {
			this._mrconso = new HashMap<>();
			BufferedReader reader = new BufferedReader(new FileReader(new File(Config.MRCONSO)));
			String line = null;
			while (null != (line = reader.readLine())) {
				String[] items = line.split("\\|");
				String keyword = items[14].toLowerCase();
				String id = items[0];
				_mrconso.put(keyword, id);
			}
			reader.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void extractAspect() {
		this._aspects = new HashMap<>();
		for (String doc : this._docs) {
			extractAspect(doc);
		}
	}

	void extractAspect(String doc) {
		DependencyParser parser = Module.getInst().getDependencyParser();
		MaxentTagger tagger = Module.getInst().getTagger();
		DocumentPreprocessor tokenizer = new DocumentPreprocessor(new StringReader(doc));
		// build up the graph, informed with POS tag and dependency relationship
		for (List<HasWord> token_part : tokenizer) {
			List<TaggedWord> tagged = tagger.tagSentence(token_part);
			GrammaticalStructure gs = parser.predict(tagged);
			for (TypedDependency typed_dependence : gs.allTypedDependencies()) {
				int idx_gov = typed_dependence.gov().index() - 1;
				int idx_dep = typed_dependence.dep().index() - 1;

				PartOfSpeech pos_gov = PartOfSpeech.OTHER;
				if (idx_gov >= 0) {
					pos_gov = Helper.mapPartOfSpeech(tagged.get(idx_gov).tag());
				}

				PartOfSpeech pos_dep = PartOfSpeech.OTHER;
				if (idx_dep >= 0) {
					pos_dep = Helper.mapPartOfSpeech(tagged.get(idx_dep).tag());
				}

				String lemma_gov = typed_dependence.gov().value().toLowerCase();
				String lemma_dep = typed_dependence.dep().value().toLowerCase();

				if (pos_gov == PartOfSpeech.NOUN && _mrconso.containsKey(lemma_gov)) {
					if (!this._aspects.containsKey(lemma_gov)) {
						this._aspects.put(lemma_gov, 0);
					}
					this._aspects.put(lemma_gov, 1 + this._aspects.get(lemma_gov));
				}

				if (pos_dep == PartOfSpeech.NOUN && _mrconso.containsKey(lemma_dep)) {
					if (!this._aspects.containsKey(lemma_dep)) {
						this._aspects.put(lemma_dep, 0);
					}
					this._aspects.put(lemma_dep, 1 + this._aspects.get(lemma_dep));
				}
			}
		}
	}

	public void printAspects(int threshold) {
		for (String aspect : _aspects.keySet()) {
			if (_aspects.get(aspect) > threshold) {
				System.out.println(aspect + ":" + _aspects.get(aspect) + ":" + _mrsty.get(_mrconso.get(aspect)));
			}
		}
	}
}
