package medical_classify;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;

public class ClassifyByDis {
	ProcessCodes processCodes = new ProcessCodes();

	public void classifyDoc(String doc) {
		TreeMap<String, Double> scores = new TreeMap<>();

		HashMap<Integer, HashMap<String, List<String>>> code_map = processCodes.code_map;

		String[] tokens = doc.split(" ");
		for (int idx = 0; idx < tokens.length; idx++) {

			for (int len : code_map.keySet()) {
				if (idx + len < tokens.length) {
					String phrase = "";
					for (int loop = idx; loop <= idx + len ; loop++) {
						phrase += " "+tokens[loop];
					}
					
					for (String code : code_map.get(len).keySet()) {
						List<String> descs = code_map.get(len).get(code);
						for (String desc : descs) {
							double score = minDistance(phrase, desc);
							scores.put(code + " -> " + desc + " -> "+phrase, score);
						}
					}
				}
			}

		}

		ArrayList<Map.Entry<String, Double>> list = new ArrayList<>();
		list.addAll(scores.entrySet());
		Collections.sort(list, new Comparator<Map.Entry<String, Double>>() {

			@Override
			public int compare(Entry<String, Double> o1, Entry<String, Double> o2) {
				return (int) (1000000000*(o1.getValue() - o2.getValue()));
			}
		});
		for (int i = 0; i <= 10; i++) {
			Map.Entry<String, Double> item = list.get(i);
			System.out.println(item.getKey() + ":" + item.getValue());
		}
	}

	public double minDistance(String word1, String word2) {
		int len1 = word1.length();
		int len2 = word2.length();

		// len1+1, len2+1, because finally return dp[len1][len2]
		int[][] dp = new int[len1 + 1][len2 + 1];

		for (int i = 0; i <= len1; i++) {
			dp[i][0] = i;
		}

		for (int j = 0; j <= len2; j++) {
			dp[0][j] = j;
		}

		// iterate though, and check last char
		for (int i = 0; i < len1; i++) {
			char c1 = word1.charAt(i);
			for (int j = 0; j < len2; j++) {
				char c2 = word2.charAt(j);

				// if last two chars equal
				if (c1 == c2) {
					// update dp value for +1 length
					dp[i + 1][j + 1] = dp[i][j];
				} else {
					int replace = dp[i][j] + 1;
					int insert = dp[i][j + 1] + 1;
					int delete = dp[i + 1][j] + 1;

					int min = replace > insert ? insert : replace;
					min = delete > min ? min : delete;
					dp[i + 1][j + 1] = min;
				}
			}
		}

		return dp[len1][len2];
	}

	public static void main(String[] args) {
		ClassifyByDis classifyByDis = new ClassifyByDis();
		classifyByDis.classifyDoc("urinary frequency");
	}
}
