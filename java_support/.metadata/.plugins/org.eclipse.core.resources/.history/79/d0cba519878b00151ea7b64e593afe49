package edu.pitt.is17.midterm;

public class Hangman {
	private String secretWord;
	private String playedLetters;
	private int failedAttempts;
	int MAX_ATTEMPTS = 5;
	
	public Hangman(String secretWord){ // hangman constructor
		secretWord.toLowerCase(); // makes it lower case
		playedLetters = "";
		failedAttempts = 0;
	}
	
	public void playLetter(char letter){ // method should play the letter and check to see if it is in the word
		for(int i = 0; i < secretWord.length(); i++){
			if(secretWord.indexOf(letter) > -1){
				playedLetters += letter;
			} else if(playedLetters.indexOf(letter) > -1 || failedAttempts >= MAX_ATTEMPTS){
				// this may be unnecessary
			} else if(secretWord.indexOf(letter) == -1){
				failedAttempts++;
			}
		}
	}
	
	public boolean matchWord(String word){ // checks if the word has been matched
		if(word.equals(secretWord)){
			word += playedLetters;
			return true;
		}
		else{
			failedAttempts ++;
			return false;
		}
	}
	
	public String getWordStatus(){ // checks the word status and returns _ for all letters not checked
		String wordGuess = "";
		for(int i = 0; i<secretWord.length(); i++){
				if(playedLetters.indexOf(secretWord.charAt(i))>-1){
					wordGuess += secretWord.charAt(i);
				}
				else{
					wordGuess += "_";
				}
			}
		// this returns the guess status of the secretWord, meaning that there should be a _ for each letter that still needs guessed and the letters that have been guessed should be displayed
		return wordGuess;
	}
	
	public boolean finished(){ // checks if the game is finished
		if(completed() || failedAttempts >= MAX_ATTEMPTS){
			return true;
		}
			return false;
	}
	
	public boolean completed(){ // checks if the game is compelted
		if(getWordStatus().contains("_")){
			return true;
		}
			return false;
	}

	public String getSecretWord() {
		return secretWord;
	}

	public String getPlayedLetters() {
		return playedLetters;
	}

	public int getFailedAttempts() {
		return failedAttempts;
	}
}
