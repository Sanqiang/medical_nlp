package edu.pitt.medical_nlp.utility;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.List;

import edu.stanford.nlp.ling.HasWord;
import edu.stanford.nlp.process.DocumentPreprocessor;

public class SynUtility {

	public HashMap<String, String> map = new HashMap<>();

	public SynUtility() {
		try {
			BufferedReader reader = new BufferedReader(new FileReader(new File("code.txt")));
			String line = null;
			while (null != (line = reader.readLine())) {
				String[] pair = line.split(" : ");
				String code = pair[0].replace(".", "_");
				String[] features = pair[1].split("\\t");
				for (String feature : features) {
					map.put(feature.toLowerCase(), code);
					map.put(feature, code);
				}
			}
			reader.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	
	public String processSentence(String sent){
		StringBuilder sb = new StringBuilder();
		DocumentPreprocessor tokenizer = new DocumentPreprocessor(new StringReader(sent));
		for (List<HasWord> token_part : tokenizer) {
			for (HasWord hasWord : token_part) {
				sb.append(hasWord.word()).append(" ");
			}
		}
		sent = sb.toString();
		for (String term : map.keySet()) {
			String code = map.get(term);
			
		}
		
		return sent;
	}
	
	public String getFeature(String phrase) {
		if (map.containsKey(phrase)) {
			return map.get(phrase);
		} else {
			return null;
		}
	}

	public static void main(String[] args) {
		SynUtility synUtility = new SynUtility();
		System.out.println(synUtility.getFeature("UTI"));
		System.out.println(synUtility.getFeature("uti"));
	}
}
