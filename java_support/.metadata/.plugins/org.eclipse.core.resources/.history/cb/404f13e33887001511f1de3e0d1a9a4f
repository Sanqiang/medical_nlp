package edu.pitt.medical_nlp;

import java.io.StringReader;
import java.util.List;

import edu.pitt.medical_nlp.utility.DependencyType;
import edu.pitt.medical_nlp.utility.Helper;
import edu.pitt.medical_nlp.utility.Module;
import edu.pitt.medical_nlp.utility.PartOfSpeech;
import edu.stanford.nlp.ling.HasWord;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.parser.nndep.DependencyParser;
import edu.stanford.nlp.process.DocumentPreprocessor;
import edu.stanford.nlp.tagger.maxent.MaxentTagger;
import edu.stanford.nlp.trees.GrammaticalStructure;
import edu.stanford.nlp.trees.TypedDependency;

public class PostProcess extends Process {
	public PostProcess() {
		super();
		processDocs();
	}

	public void processDocs() {
		for (String doc : this._docs) {
			processDocs(doc);
		}
	}

	public String processDocs(String doc) {
		StringBuilder ndoc = new StringBuilder(doc);
		DocumentPreprocessor tokenizer = new DocumentPreprocessor(new StringReader(doc));
		MaxentTagger tagger = Module.getInst().getTagger();
		DependencyParser parser = Module.getInst().getDependencyParser();
		for (List<HasWord> token_part : tokenizer) {
			List<TaggedWord> tagged = tagger.tagSentence(token_part);
			GrammaticalStructure gs = parser.predict(tagged);
			for (TypedDependency typed_dependence : gs.allTypedDependencies()) {
				int idx_gov = typed_dependence.gov().index() - 1;
				int idx_dep = typed_dependence.dep().index() - 1;
				String lemma_gov typed_dependence.gov().word();
				// PartOfSpeech pos_gov = PartOfSpeech.OTHER;
				// if (idx_gov >= 0) {
				// pos_gov = Helper.mapPartOfSpeech(tagged.get(idx_gov).tag());
				// }
				// PartOfSpeech pos_dep = PartOfSpeech.OTHER;
				// if (idx_dep >= 0) {
				// pos_dep = Helper.mapPartOfSpeech(tagged.get(idx_dep).tag());
				// }
				DependencyType dependency_type = Helper.mapRelationTypes(typed_dependence.reln().getShortName());
				
			}
		}
		return "";
	}
}
